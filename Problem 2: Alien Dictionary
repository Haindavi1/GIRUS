#include <stdio.h>
#include <string.h>
#define SIZE 26
#define MAX_WORDS 100
#define MAX_LEN 100
int graph[SIZE][SIZE];
int inDegree[SIZE];
int used[SIZE];
char order[SIZE];
int front = 0, back = 0;
void insertEdge(char a, char b) {
    int u = a - 'a';
    int v = b - 'a';
    if (graph[u][v] == 0) {
        graph[u][v] = 1;
        inDegree[v]++;
    }
}

void findOrder() {
    int queue[SIZE];
    for (int i = 0; i < SIZE; i++) {
        if (used[i] == 1 && inDegree[i] == 0) {
            queue[back++] = i;
        }
    }

    int index = 0;
    while (front < back) {
        int curr = queue[front++];
        order[index++] = curr + 'a';

        for (int j = 0; j < SIZE; j++) {
            if (graph[curr][j]) {
                inDegree[j]--;
                if (inDegree[j] == 0) {
                    queue[back++] = j;
                }
            }
        }
    }

    int totalUsed = 0;
    for (int i = 0; i < SIZE; i++) {
        if (used[i]) totalUsed++;
    }

    if (index < totalUsed) {
        printf("No valid order. There's a cycle.\n");
    } else {
        order[index] = '\0';
        printf("The character order is: %s\n", order);
    }
}

int main() {
    int n;
    char words[MAX_WORDS][MAX_LEN];

    printf("Enter number of words: ");
    scanf("%d", &n);

    printf("Enter the words:\n");
    for (int i = 0; i < n; i++) {
        scanf("%s", words[i]);
        for (int j = 0; words[i][j]; j++) {
            used[words[i][j] - 'a'] = 1;
        }
    }

    for (int i = 0; i < n - 1; i++) {
        char *w1 = words[i];
        char *w2 = words[i + 1];
        int len1 = strlen(w1);
        int len2 = strlen(w2);
        int minLen = len1 < len2 ? len1 : len2;

        for (int j = 0; j < minLen; j++) {
            if (w1[j] != w2[j]) {
                insertEdge(w1[j], w2[j]);
                break;
            }
        }
    }

    findOrder();

    return 0;
}
